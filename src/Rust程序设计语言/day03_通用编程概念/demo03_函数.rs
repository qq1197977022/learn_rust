fn main() {
    println!("------函数参数------");
    fun1(33);
    fun2(2, 3);

    println!("------语句_表达式------");
    let y = {
        let x = 3;
        println!("x = {}", x);
        x + 1   //加;变语句
    };
    println!("y = {}", y);

    println!("------函数返回值------");
    let ret = fun3(5);
    println!("ret = {}", ret);

    let ret = plus_one(3);
    println!("ret = {}", ret);
}

fn fun1(x: i32) {
    println!("x = {}", x);
}
fn fun2(x: i32, y: i32) {
    println!("{} + {} = {}", x, y, x+y);
}
fn fun3(x: i32) -> i32{
    x
}
fn plus_one(x: i32) -> i32 {
    x + 1
}

/*
一.概要
    1.标识符命名规范
        1.函数/变量: snake case
    2.fn: 函数声明关键字
    3.{}: 函数体定界
二.参数
    1.参数是函数签名部分中的特殊变量
        1.形参: parameter
        2.实参: argument
    2.必须声明形参类型 ~ 类型注解便于编译器理解开发者意图
三.函数体
    1.由语句 + 表达式组成
四,语句, 表达式
    1.Rust是基于表达式的语言 ~ 与其他语言不同
    2.语句/表达式
        A.语句: 执行操作 ~ 无返回值
        B.表达式: 计算并生产值 ~ 有返回值
            1.函数调用
            2.宏调用
            3.用于创建作用域的大括号{} ~ 代码块
五.函数返回值
    1.只需对返回值进行类型注解, 无需命名

*/
































