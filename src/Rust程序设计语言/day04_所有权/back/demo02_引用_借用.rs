//------------------------------------------一.不可变引用/ 借用------------------------------------------
fn main() {
    let s1 = String::from("hello");
    let len = calc_len(&s1);
    println!("the length of <{}> is <{}>", s1, len);
}

fn calc_len(s: &String) -> usize {
    println!("s = {}\t*s = {}\t&s = {}", s, *s, &s);
    s.len()
}

/*
引用与借用
  一.引用
    1.符号: &
    2.本质: 指向变量s1标头值的指针型变量
    3.特点
      1.可使用值, 但不获取其所有权
      2.默认不可变 ~ 和变量一样
  二.解引用
    1.符号: *
  三.借用
    1.作为函数参数的引用, 称为借用
*/

//------------------------------------------二.可变引用/ 借用------------------------------------------
fn main() {
    let mut s = String::from("hello");
    /*change(&mut s);
    println!("s = {}", s);*/
    let s1 = &mut s;
    let s2 = &mut s;
    println!("{}\t{}", s1, s2)
}

fn change(s: &mut String) {
    s.push_str(", world");
    s.push('-');
    s.push('A');
    s.push('B');
    s.push('C');
}
/*
二.可变引用
    1.对可变变量的引用
    2.本质
    3.特点
      1.同一作用域同一数据有且只有一个可变引用
三.可变引用不能同时存在
*/
//------------------------------------------三.悬垂引用------------------------------------------
/*
一.悬垂指针
    1.概念: 指向内存可能已分配给其他持有者
    2.原因: 释放内存时, 保留指向它的指针
    3.Rust编译器确保数据不会在其引用之前离开作用域
*/